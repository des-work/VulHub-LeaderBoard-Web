version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: vulhub-postgres
    environment:
      POSTGRES_DB: vulhub
      POSTGRES_USER: vulhub
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-vulhub123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vulhub -d vulhub"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - vulhub-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: vulhub-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - vulhub-network

  # API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: api-production
    container_name: vulhub-api
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://vulhub:${POSTGRES_PASSWORD:-vulhub123}@postgres:5432/vulhub
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-dev-jwt-secret-key-change-in-production}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET:-dev-refresh-secret-key-change-in-production}
      - PORT=4000
    ports:
      - "4000:4000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - vulhub-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:4000/api/v1/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Web Application
  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: web-production
    container_name: vulhub-web
    environment:
      - NODE_ENV=production
      - API_URL=http://api:4000/api/v1
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:4000/api/v1}
    ports:
      - "4010:3000"
    depends_on:
      api:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - vulhub-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  vulhub-network:
    driver: bridge

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id        String   @id @default(cuid())
  name      String
  domain    String?  @unique
  settings  Json?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users        User[]
  projects     Project[]
        submissions  Submission[]
        badges       Badge[]
        userBadges   UserBadge[]
        leaderboards Leaderboard[]
        events       EventStore[]

  @@map("tenants")
}

model User {
  id           String   @id @default(cuid())
  email        String
  firstName    String
  lastName     String
  avatarUrl    String?
  password     String?
  status       UserStatus @default(ACTIVE)
  role         UserRole @default(STUDENT)
  tenantId     String
  lastLoginAt  DateTime?
  preferences  Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  tenant      Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  submissions Submission[]
  userBadges  UserBadge[]
  leaderboards Leaderboard[]

  @@unique([email, tenantId])
  @@map("users")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  vulhubId    String?  @unique
  category    String
  difficulty  String
  points      Int @default(0)
  isActive    Boolean @default(true)
  isPublic    Boolean @default(true)
  tags        String[]
  tenantId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenant      Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  submissions Submission[]

  @@map("projects")
}

model Submission {
  id           String           @id @default(cuid())
  projectId    String
  userId       String
  tenantId     String
  status       SubmissionStatus @default(PENDING)
  score        Int?
  feedback     String?
  evidenceUrls String[]
  submittedAt  DateTime @default(now())
  reviewedAt   DateTime?
  reviewedBy   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant  Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("submissions")
}

model Badge {
  id          String   @id @default(cuid())
  name        String
  description String?
  icon        String?
  category    String?
  difficulty  String?
  criteria    Json?
  isActive    Boolean @default(true)
  tenantId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenant     Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userBadges UserBadge[]

  @@map("badges")
}

model UserBadge {
  id       String   @id @default(cuid())
  userId   String
  badgeId  String
  tenantId String
  earnedAt DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge  Badge  @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId, tenantId])
  @@map("user_badges")
}

model Leaderboard {
  id        String   @id @default(cuid())
  userId    String
  tenantId  String
  score     Int @default(0)
  rank      Int @default(0)
  updatedAt DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([userId, tenantId])
  @@map("leaderboards")
}

model EventStore {
  id           String   @id @default(cuid())
  eventId      String   @unique
  eventType    String
  aggregateId  String
  aggregateType String
  eventData    Json
  occurredOn   DateTime
  version      Int
  tenantId     String
  createdAt    DateTime @default(now())

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([aggregateId])
  @@index([eventType])
  @@index([tenantId])
  @@index([occurredOn])
  @@map("event_store")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}

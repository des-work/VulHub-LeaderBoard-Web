import React, { useState } from 'react';
import { Shield, Tag } from 'lucide-react';
import { COLORS, VULNERABILITY_CARD, SPACING } from '../../lib/community/config';
import { createGlowStyle, createHoverEffect } from '../../lib/community/utils';

interface VulnerabilityCardProps {
  name: string;
  cve?: string;
  description: string;
  tags: string[];
  onClick?: () => void;
  className?: string;
}

export const VulnerabilityCard: React.FC<VulnerabilityCardProps> = ({
  name,
  cve,
  description,
  tags,
  onClick,
  className = '',
}) => {
  const [isHovered, setIsHovered] = useState(false);

  return (
    <div
      onClick={onClick}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
      className={`cursor-pointer font-mono transition-all ${className}`}
      style={{
        padding: VULNERABILITY_CARD.sizing.padding,
        borderRadius: VULNERABILITY_CARD.sizing.borderRadius,
        borderWidth: VULNERABILITY_CARD.sizing.borderWidth,
        borderLeftWidth: '4px',
        borderColor: isHovered ? VULNERABILITY_CARD.colors.borderHover : VULNERABILITY_CARD.colors.border,
        borderLeftColor: isHovered ? COLORS.matrix.bright : COLORS.matrix.dim,
        backgroundColor: isHovered ? `${COLORS.matrix.dim}15` : 'transparent',
        ...createHoverEffect({
          scale: isHovered ? VULNERABILITY_CARD.effects.hoverScale : 1,
          glow: isHovered ? COLORS.glow.matrix : undefined,
        }),
      }}
    >
      {/* Title Row */}
      <div className="flex items-start justify-between gap-3 mb-2">
        <div className="flex items-center gap-2 flex-1 min-w-0">
          <Shield
            className="flex-shrink-0"
            size={18}
            style={{
              color: isHovered ? COLORS.matrix.bright : COLORS.matrix.medium,
              filter: isHovered ? `drop-shadow(0 0 6px ${COLORS.matrix.primary})` : 'none',
            }}
          />
          <h4
            className="font-bold text-lg truncate"
            style={{
              color: VULNERABILITY_CARD.colors.title,
              textShadow: isHovered ? `0 0 10px ${COLORS.matrix.primary}` : 'none',
            }}
          >
            {name}
          </h4>
        </div>

        {/* CVE Badge */}
        {cve && (
          <div
            className="px-2 py-1 rounded text-xs font-bold flex-shrink-0"
            style={{
              backgroundColor: `${VULNERABILITY_CARD.colors.cve}20`,
              color: VULNERABILITY_CARD.colors.cve,
              border: `1px solid ${VULNERABILITY_CARD.colors.cve}`,
              boxShadow: isHovered ? `0 0 10px ${VULNERABILITY_CARD.colors.cve}` : 'none',
            }}
          >
            {cve}
          </div>
        )}
      </div>

      {/* Description */}
      <p
        className="text-sm leading-relaxed mb-3"
        style={{
          color: VULNERABILITY_CARD.colors.description,
        }}
      >
        {description}
      </p>

      {/* Tags */}
      {tags.length > 0 && (
        <div className="flex flex-wrap gap-2">
          {tags.map((tag, idx) => (
            <div
              key={idx}
              className="flex items-center gap-1 text-xs rounded"
              style={{
                padding: VULNERABILITY_CARD.sizing.tagPadding,
                backgroundColor: `${COLORS.cyan.dark}20`,
                color: VULNERABILITY_CARD.colors.tag,
                border: `1px solid ${COLORS.cyan.dark}40`,
              }}
            >
              <Tag size={10} style={{ color: COLORS.cyan.medium }} />
              <span>#{tag}</span>
            </div>
          ))}
        </div>
      )}

      {/* Decorative corner indicators when hovered */}
      {isHovered && (
        <>
          <div
            className="absolute top-0 right-0 w-2 h-2"
            style={{
              backgroundColor: COLORS.matrix.bright,
              boxShadow: `0 0 10px ${COLORS.matrix.primary}`,
            }}
          />
          <div
            className="absolute bottom-0 left-0 w-2 h-2"
            style={{
              backgroundColor: COLORS.cyan.primary,
              boxShadow: `0 0 10px ${COLORS.cyan.primary}`,
            }}
          />
        </>
      )}
    </div>
  );
};

